; Original from https://www.smspower.org/maxim/HowToProgram/Index

;;;;;;;;;; Modified for swpxlt demonstration of anim2sms

; Requires anim.asm in the parent directory.
;
; This can be generated by anim2sms with such a command-line:
;
; ./anim2sms animation.flc -o anim.asm
;
; To compile this example:
;
; wla-z80 -v -o animation.o animation.asm || exit 1
; wlalink -d -S -v animation.lnk animation.sms || exit 1

;==============================================================
; WLA-DX banking setup
;==============================================================
.memorymap
defaultslot 0
slotsize $4000
slot 0 $0000
slot 1 $4000
slot 2 $8000
slot 3 $C000
.endme

.rombankmap
bankstotal 256
banksize $4000
banks 256
.endro

;==============================================================
; SDSC tag and SMS rom header
;==============================================================
.sdsctag 1.2,"Animation demo","",""

.bank 0 slot 0
.org $0000
;==============================================================
; Boot section
;==============================================================
    di              ; disable interrupts
    im 1            ; Interrupt mode 1
    jp main         ; jump to main program

.org $0038
	push af
	in a, ($bf) ; read control port to clear interrupt
	pop af
	ei
	reti

.org $0066
;==============================================================
; Pause button handler
;==============================================================
    ; Do nothing
    retn

;==============================================================
; Main program
;==============================================================
main:
    ld sp, $dff0

    ;==============================================================
    ; Set up VDP registers
    ;==============================================================
    ld hl,VdpData
    ld b,VdpDataEnd-VdpData
    ld c,$bf
    otir

    ;==============================================================
    ; Clear VRAM
    ;==============================================================
    ; 1. Set VRAM write address to 0 by outputting $4000 ORed with $0000
    ld a,$00
    out ($bf),a
    ld a,$40
    out ($bf),a
    ; 2. Output 16KB of zeroes
    ld bc, $4000    ; Counter for 16KB of VRAM
    ClearVRAMLoop:
        ld a,$00    ; Value to write
        out ($be),a ; Output to VRAM address, which is auto-incremented after each write
        dec bc
        ld a,b
        or c
        jp nz,ClearVRAMLoop


    ; Turn screen on
    ld a,%11100000
;          |||| |`- Zoomed sprites -> 16x16 pixels
;          |||| `-- Doubled sprites -> 2 tiles per sprite, 8x16
;          |||`---- 30 row/240 line mode
;          ||`----- 28 row/224 line mode
;          |`------ VBlank interrupts
;          `------- Enable display
    out ($bf),a
    ld a,$81
    out ($bf),a

    ; Infinite loop to stop program


	ei
Loop:
	ld a, ANIMATION_ENTRY_BANK
	ld ($fffe), a
	 call animation_entry
     jp Loop

;==============================================================
; Data
;==============================================================

.bank 0 slot 0

; VDP initialisation data
VdpData:
.db $04,$80,$00,$81,$ff,$82,$ff,$85,$ff,$86,$ff,$87,$00,$88,$00,$89,$ff,$8a
VdpDataEnd:

.bank 1 slot 1

.INC "../anim.asm"
